# Copyright (C) 2012 The Android Open Source Project
#
# IMPORTANT: Do not create world writable files or directories.
# This is a common source of Android security bugs.
#

import /init.usb.rc
import /init.${ro.hardware}.rc
import /init.trace.rc

on early-init

    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    setcon u:r:init:s0
    
    start ueventd

# create mountpoints
    mkdir /mnt 0775 root system

on init

sysclktz 0

loglevel 3

# setup the global environment
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export LD_LIBRARY_PATH /vendor/lib:/system/lib
    export ANDROID_ROOT /system
    export ANDROID_DATA /data

# Backward compatibility
    symlink /system/etc /etc
    symlink /sys/kernel/debug /d

# Right now vendor lives on the same filesystem as system,
# but someday that may change.
    symlink /system/vendor /vendor

	echo "mkdir /system"
    mkdir /system
    mkdir /data 0771 system system

	echo "mkdir /system"
#    # See storage config details at http://source.android.com/tech/storage/
#    mkdir /mnt/shell 0700 shell shell
#
#
#    # Create private mountpoint so we can MS_MOVE from staging
#    mount tmpfs tmpfs /mnt/secure mode=0700,uid=0,gid=0
#
#    # Secure container public mount points.
#    mkdir /mnt/asec  0700 root system
#    mount tmpfs tmpfs /mnt/asec mode=0755,gid=1000
#
#    # Filesystem image public mount points.
#    mkdir /mnt/obb 0700 root system
#    mount tmpfs tmpfs /mnt/obb mode=0755,gid=1000
#
#    write /proc/sys/kernel/panic_on_oops 1
#    write /proc/sys/kernel/hung_task_timeout_secs 0
#    write /proc/cpu/alignment 4
#    write /proc/sys/kernel/sched_latency_ns 10000000
#    write /proc/sys/kernel/sched_wakeup_granularity_ns 2000000
#    write /proc/sys/kernel/sched_compat_yield 1
#    write /proc/sys/kernel/sched_child_runs_first 0
#    write /proc/sys/kernel/randomize_va_space 2
#    write /proc/sys/kernel/kptr_restrict 2
#    write /proc/sys/kernel/dmesg_restrict 1
#    write /proc/sys/vm/mmap_min_addr 32768
#    write /proc/sys/kernel/sched_rt_runtime_us 950000
#    write /proc/sys/kernel/sched_rt_period_us 1000000
#
## Create cgroup mount points for process groups
#    mkdir /dev/cpuctl
#    mount cgroup none /dev/cpuctl cpu
#    chown system system /dev/cpuctl
#    chown system system /dev/cpuctl/tasks
#    chmod 0660 /dev/cpuctl/tasks
#    write /dev/cpuctl/cpu.shares 1024
#    write /dev/cpuctl/cpu.rt_runtime_us 950000
#    write /dev/cpuctl/cpu.rt_period_us 1000000
#
#    mkdir /dev/cpuctl/apps
#    chown system system /dev/cpuctl/apps/tasks
#    chmod 0666 /dev/cpuctl/apps/tasks
#    write /dev/cpuctl/apps/cpu.shares 1024
#    write /dev/cpuctl/apps/cpu.rt_runtime_us 800000
#    write /dev/cpuctl/apps/cpu.rt_period_us 1000000
#
#    mkdir /dev/cpuctl/apps/bg_non_interactive
#    chown system system /dev/cpuctl/apps/bg_non_interactive/tasks
#    chmod 0666 /dev/cpuctl/apps/bg_non_interactive/tasks
#    # 5.0 %
#    write /dev/cpuctl/apps/bg_non_interactive/cpu.shares 52
#    write /dev/cpuctl/apps/bg_non_interactive/cpu.rt_runtime_us 700000
#    write /dev/cpuctl/apps/bg_non_interactive/cpu.rt_period_us 1000000

# Allow everybody to read the xt_qtaguid resource tracking misc dev.
# This is needed by any process that uses socket tagging.
#   chmod 0644 /dev/xt_qtaguid

on fs
# mount mtd partitions
    # Mount /system rw first to give the filesystem a chance to save a checkpoint
    mount -t squashfs -o loop mnt/casper/filesystem.squashfs squashfs
    mount yaffs2 mtd@system /system
    mount yaffs2 mtd@system /system ro remount
    mount yaffs2 mtd@userdata /data nosuid nodev

on post-fs
    # once everything is setup, no need to modify /
    mount rootfs rootfs / ro remount
    # mount shared so changes propagate into child namespaces
    mount rootfs rootfs / shared rec
    mount tmpfs tmpfs /mnt/secure private rec


on post-fs-data
    # We chown/chmod /data again so because mount is run as root + defaults
    chown system system /data
    chmod 0771 /data
    # We restorecon /data in case the userdata partition has been reset.
    restorecon /data


on boot
# basic network init
    ifup lo
    hostname localhost
    domainname localdomain

# set RLIMIT_NICE to allow priorities from 19 to -20
    setrlimit 13 40 40

# Memory management.  Basic kernel parameters, and allow the high
# level system server to be able to adjust the kernel OOM driver
# parameters to match how it is managing things.


    chown root radio /proc/cmdline

    class_start core
    class_start main

on nonencrypted
    class_start late_start


## Daemon processes to be run by init.
##
service ueventd /sbin/ueventd
    class core
    critical
    seclabel u:r:ueventd:s0

on property:selinux.reload_policy=1
    restart ueventd
    restart installd

service console /system/bin/sh
    class core
    console
    disabled
    user shell
    group log


service servicemanager /system/bin/servicemanager
    class core
    user system
    group system
    critical

